// Blocking listen
int TCPServer::listen()
{
    int client_limit = 100;
    // Attempt to listen
    if (::listen(sock, client_limit) < 0) {
        perror("listen");
    }

    int addrlen = sizeof(address);
    int new_socket; // Socket with client            BIG BUG
    // Attempt to accept new client                  MEMORIAL
    if ((new_socket = accept(sock, (struct sockaddr*) &server, (socklen_t*)&addrlen)) < 0) {
        perror("accept");
    }

    // Return socket for input
    return new_socket;
}

// OLD TEST (as specified by Eli)
void SearcherTester::old_test()
 {
    Searcher<Cell> *BreadthFS = new BreadthFirstSearch<Cell>();
    Searcher<Cell> *BestFS = new BestFirstSearch<Cell>();
    Searcher<Cell> *DFS = new DepthFirstSearch<Cell>();
    Searcher<Cell> *Astar = new AStar<Cell>();

    list<tuple<int, int>> BreadthFS_results = list<tuple<int, int>>();
    list<tuple<int, int>> BestFS_results = list<tuple<int, int>>();
    list<tuple<int, int>> DFS_results = list<tuple<int, int>>();
    list<tuple<int, int>> Astar_results = list<tuple<int, int>>();

    int BreadthFS_nodes, BreadthFS_price = 0;
    int BestFS_nodes, BestFS_price = 0;
    int DFS_nodes, DFS_price = 0;
    int Astar_nodes, Astar_price = 0;

    tuple<int, int> result;
    // Test 10 times for each matrix with each algorithm
    for (int n = 10; n < 50; ++n) {
        for (int i = 0; i < 10; ++i) {
            // Generate searchable matrix
            int **matrix = generate_matrix(n, n, 10);
            MatrixSearchable *searchable = new MatrixSearchable(n, n, matrix);

            // Get results for each algorithm

            result = run(BreadthFS, searchable);
            BreadthFS_nodes += get<0>(result);
            BreadthFS_price += get<1>(result);

            result = run(BestFS, searchable);
            BestFS_nodes += get<0>(result);
            BestFS_price += get<1>(result);

            result = run(DFS, searchable);
            DFS_nodes += get<0>(result);
            DFS_price += get<1>(result);

            result = run(Astar, searchable);
            Astar_nodes += get<0>(result);
            Astar_price += get<1>(result);

            delete searchable;
            delete matrix;
        }

        // Push average of results
        BreadthFS_results.push_back({BreadthFS_nodes / 10, BreadthFS_price / 10});
        BestFS_results.push_back({BestFS_nodes / 10, BestFS_price / 10});
        DFS_results.push_back({DFS_nodes / 10, DFS_price / 10});
        Astar_results.push_back({Astar_nodes / 10, Astar_price / 10});

        // Reset aggregates
        BreadthFS_nodes, BestFS_nodes, DFS_nodes, Astar_nodes = 0;
        BreadthFS_nodes, BestFS_nodes, DFS_nodes, Astar_nodes = 0;
    }

    ofstream graphs_file("graphs.txt", fstream::app);
    ofstream solutions_file("solution.txt", fstream::app);

    // Write results to file

    delete BreadthFS;
    delete BestFS;
    delete DFS;
    delete Astar;
}

void test_serial_reverser()
        {
            StringReverser* stringReverser = new StringReverser();
            FileCacheManager* cacheManager = new FileCacheManager("test_file.txt");
            TestClientHandler<string, string>* clientHandler = new TestClientHandler<string, string>(stringReverser, cacheManager);

            // Define server and start it
            MySerialServer* server = new MySerialServer(clientHandler);
            server->open(5400);
            server->start();
            /*
             * Run Python code as client (must open new socket for each connection)
             * Python code is in python_test (copy-paste into python3 command-line)
             */
            // Delete server (and thus handler)
            delete server;
        }

        void test_parallel_reverser()
        {
            StringReverser* stringReverser = new StringReverser();
            FileCacheManager* cacheManager = new FileCacheManager("test_file.txt");
            TestClientHandler<string, string>* clientHandler = new TestClientHandler<string, string>(stringReverser, cacheManager);

            // Define server and start it
            MyParallelServer* server = new MyParallelServer(clientHandler);
            server->open(5400);
            server->start();
            /*
             * Run Python code as client (must open new socket for each connection)
             * Python code is in python_test (copy-paste into python3 command-line)
             */
            delete cacheManager;
            delete server;
        }
