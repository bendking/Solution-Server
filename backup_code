// Blocking listen
int TCPServer::listen()
{
    int client_limit = 100;
    // Attempt to listen
    if (::listen(sock, client_limit) < 0) {
        perror("listen");
    }

    int addrlen = sizeof(address);
    int new_socket; // Socket with client            BIG BUG
    // Attempt to accept new client                  MEMORIAL
    if ((new_socket = accept(sock, (struct sockaddr*) &server, (socklen_t*)&addrlen)) < 0) {
        perror("accept");
    }

    // Return socket for input
    return new_socket;
}

// OLD TEST (as specified by Eli)
void SearcherTester::old_test()
 {
    Searcher<Cell> *BreadthFS = new BreadthFirstSearch<Cell>();
    Searcher<Cell> *BestFS = new BestFirstSearch<Cell>();
    Searcher<Cell> *DFS = new DepthFirstSearch<Cell>();
    Searcher<Cell> *Astar = new AStar<Cell>();

    list<tuple<int, int>> BreadthFS_results = list<tuple<int, int>>();
    list<tuple<int, int>> BestFS_results = list<tuple<int, int>>();
    list<tuple<int, int>> DFS_results = list<tuple<int, int>>();
    list<tuple<int, int>> Astar_results = list<tuple<int, int>>();

    int BreadthFS_nodes, BreadthFS_price = 0;
    int BestFS_nodes, BestFS_price = 0;
    int DFS_nodes, DFS_price = 0;
    int Astar_nodes, Astar_price = 0;

    tuple<int, int> result;
    // Test 10 times for each matrix with each algorithm
    for (int n = 10; n < 50; ++n) {
        for (int i = 0; i < 10; ++i) {
            // Generate searchable matrix
            int **matrix = generate_matrix(n, n, 10);
            MatrixSearchable *searchable = new MatrixSearchable(n, n, matrix);

            // Get results for each algorithm

            result = run(BreadthFS, searchable);
            BreadthFS_nodes += get<0>(result);
            BreadthFS_price += get<1>(result);

            result = run(BestFS, searchable);
            BestFS_nodes += get<0>(result);
            BestFS_price += get<1>(result);

            result = run(DFS, searchable);
            DFS_nodes += get<0>(result);
            DFS_price += get<1>(result);

            result = run(Astar, searchable);
            Astar_nodes += get<0>(result);
            Astar_price += get<1>(result);

            delete searchable;
            delete matrix;
        }

        // Push average of results
        BreadthFS_results.push_back({BreadthFS_nodes / 10, BreadthFS_price / 10});
        BestFS_results.push_back({BestFS_nodes / 10, BestFS_price / 10});
        DFS_results.push_back({DFS_nodes / 10, DFS_price / 10});
        Astar_results.push_back({Astar_nodes / 10, Astar_price / 10});

        // Reset aggregates
        BreadthFS_nodes, BestFS_nodes, DFS_nodes, Astar_nodes = 0;
        BreadthFS_nodes, BestFS_nodes, DFS_nodes, Astar_nodes = 0;
    }

    ofstream graphs_file("graphs.txt", fstream::app);
    ofstream solutions_file("solution.txt", fstream::app);

    // Write results to file

    delete BreadthFS;
    delete BestFS;
    delete DFS;
    delete Astar;
}

void test_serial_reverser()
        {
            StringReverser* stringReverser = new StringReverser();
            FileCacheManager* cacheManager = new FileCacheManager("test_file.txt");
            TestClientHandler<string, string>* clientHandler = new TestClientHandler<string, string>(stringReverser, cacheManager);

            // Define server and start it
            MySerialServer* server = new MySerialServer(clientHandler);
            server->open(5400);
            server->start();
            /*
             * Run Python code as client (must open new socket for each connection)
             * Python code is in python_test (copy-paste into python3 command-line)
             */
            // Delete server (and thus handler)
            delete server;
        }

        void test_parallel_reverser()
        {
            StringReverser* stringReverser = new StringReverser();
            FileCacheManager* cacheManager = new FileCacheManager("test_file.txt");
            TestClientHandler<string, string>* clientHandler = new TestClientHandler<string, string>(stringReverser, cacheManager);

            // Define server and start it
            MyParallelServer* server = new MyParallelServer(clientHandler);
            server->open(5400);
            server->start();
            /*
             * Run Python code as client (must open new socket for each connection)
             * Python code is in python_test (copy-paste into python3 command-line)
             */
            delete cacheManager;
            delete server;
        }


from socket import *
import numpy
from random import randint

def random_matrix():
      # Generate matrix dimensions
      rows = randint(10, 50)
      cols = randint(10, 50)
      
      # print("Matrix dimensions: {}x{}".format(rows, cols))
      matrix = numpy.random.random((rows, cols))
      return matrix, rows, cols

def random_point(rows, cols):
      i = randint(0, rows)
      j = randint(0, cols)

# Define matrixes
m1 = [[0, 9, 5, 1, 0, 3,-1, 5, 2, 0],
      [7, 6, 4, 2, 6, 3, 8, 9, 1,-1],
      [9, 7, 4,-1, 3, 5,-1, 9, 2, 9],
      [9, 6, 9, 2, 6, 8, 6, 7, 1, 9],
      [6, 9, 3, 0,-1, 9, 3, 8, 6, 5],
      [7, 5, 1, 1, 6, 5, 5, 4, 4, 6],
      [3, 3, 3, 2, 5, 8, 9, 1, 3, 0],
      [-1, 9, 8, 3,-1, 9, 0, 1, 5,8],
      [6, 0, 3, 8, 2, 8, 1, 9, 2, 6],
      [5, 7, 8, 7, 8, 3, 4, 8, 4, 0]]

m2 = [[0, 2, 7, 6, 4, 6, 3, 6, 6, 7],
      [4, 0, 9, 6, 7,-1, 5, 9, 7, 8],
      [3, 1, 3, 2, 9, 2, 4, 1, 9, 7],
      [9, 4,-1, 4, 9, 5, 9, 2,-1, 6],
      [9, 4, 5, 8, 9, 3, 8, 4, 2, 6],
      [1, 7, 6, 3, 8, 3, 4, 0, 6, 3],
      [9, 5, 7, 7,-1, 6, 2, 8,-1, 0],
      [4, 7, 3,-1, 5, 3, 1, 1, 8, 5],
      [6, 8, 0, 2, 2, 7, 7, 7, 8, 3],
      [-1, 7, 7, 7, 3, 5, 3, 6, 3,0]]

m3 = [[0, 6, 9, 1, 5, 2, 3, 7, 5, 0],
      [0,-1, 9,-1, 3,-1, 7, 9, 6, 6],
      [0, 6, 1, 8, 1, 5, 1, 3, 0, 4],
      [6, 7, 9, 3, 7, 2, 5, 1, 0, 9],
      [2,-1, 9,-1, 0, 0, 0, 6,-1, 7],
      [2, 0, 1, 3, 7, 3, 9, 8, 7, 8],
      [2, 1, 5,-1, 4, 1, 3,-1, 3, 2],
      [7, 4, 2, 6, 4, 1, 8, 3, 9, 6],
      [0,-1, 8, 0, 3, 3, 4, 3, 1, 0],
      [-1, 2, 0, 6, 3, 5, 8, 5, 3,0]]

# Define & connect sockets to server
s1 = socket(AF_INET, SOCK_STREAM)
s2 = socket(AF_INET, SOCK_STREAM)
s3 = socket(AF_INET, SOCK_STREAM)
s1.connect(('127.0.0.1', 5400))
s2.connect(('127.0.0.1', 5400))
s3.connect(('127.0.0.1', 5400))

# Send matrixes
for i in range(10):
      s1.send((",".join(map(str,m1[i])) + "\n").encode())
      s2.send((",".join(map(str,m2[i])) + "\n").encode())
      s3.send((",".join(map(str,m3[i])) + "\n").encode())

# Send start
s1.send(("0,0" + "\n").encode())
s2.send(("0,0" + "\n").encode())
s3.send(("0,0" + "\n").encode())
# Send goal
s1.send(("9,9" + "\n").encode())
s2.send(("9,9" + "\n").encode())
s3.send(("9,9" + "\n").encode())
# Send end
s1.send(("end" + "\n").encode())
s2.send(("end" + "\n").encode())
s3.send(("end" + "\n").encode())

# Print solutions
print(s1.recv(1024))
print(s2.recv(1024))
print(s3.recv(1024))